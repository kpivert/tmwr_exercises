---
title: "Chapter 2"
format:
  html:
    theme: cosmo
    toc: true
    number-sections: true
---

```{r}
require(tidyverse)
require(lubridate)
```

## The problem with base R.

```{r}

mtcars[order(mtcars$gear, mtcars$mpg), ] |> 
  head() |> 
  gt::gt()
```

## ...Versus the Tidyverse

```{r}

arrange(.data = mtcars, gear, mpg) |> 
  head() |> 
  gt::gt()
```

## Sampling Example

```{r}

boot_samp <- rsample::bootstraps(mtcars, times = 3)
boot_samp
```

```{r}

class(boot_samp)
```

## Piping Examples

Instead of this...

```{r}
small_mtcars <- 
  arrange(mtcars, gear)

small_mtcars <- 
  slice(small_mtcars, 1:10)

small_mtcars
```

...or this...

```{r}
small_mtcars <- 
  slice(
    arrange(mtcars, gear),
    1:10
  )

small_mtcars
```

...do this

```{r}

small_mtcars <- 
  mtcars |> 
  arrange(gear) |> 
  slice(1:10)

small_mtcars
```

## ggplot2

```{r}
ggplot(
  mtcars,
  aes(
    x = wt, 
    y = mpg
    )
  ) +
  geom_point() +
  geom_smooth(method = lm)
```

## Example

The old way

```{r}
n <- nrow(mtcars)
ratios <- rep(NA_real_, n)
for (car in 1:n) {
  ratios[car] <- log(mtcars$mpg[car]/mtcars$wt[car])
}
head(ratios)
```

The old way...with skills

```{r}

ratios <- log(mtcars$mpg/mtcars$wt)
head(ratios)
```

Better...not

```{r}
#| eval: false
compute_log_ratio <- function(mpg, wt) {
  log_base <- getOption("log_base", default = exp(1)) # gets external data
  results <- log(mpg/wt, base = log_base)
  print(mean(results)) # prints to console
  done <<-TRUE
  results
}

compute_log_ratio(mpg = mtcars$mpg, wt = mtcars$wt)
```

More Better

```{r}
compute_log_ratio <- function(mpg, wt, log_base = exp(1)) {
  log(mpg/wt, base = log_base)
}

compute_log_ratio(mtcars$mpg, mtcars$wt)
```

## `purrr::map`

```{r}
map(head(mtcars$mpg, 3), sqrt)
```

```{r}
map_dbl(head(mtcars$mpg, 3), sqrt)
```

```{r}
log_ratios <- 
  map2_dbl(mtcars$mpg, mtcars$wt, compute_log_ratio)

head(log_ratios)
```

## Use `~` For Anonymous Functions!

```{r}
map2_dbl(mtcars$mpg, mtcars$wt, ~ log(.x/.y)) |> 
  head()
```

## Tidyverse Syntax

```{r}

# won't take space between ``
data.frame(
  `variable 1` = 1:2,
  two = 3:4
)
```

```{r}
# But can be coerced

df <- 
  data.frame(
    `variable 1` = 1:2,
    two = 3:4,
    check.names = FALSE
  )

df
```

But Tibbles Just Work

```{r}
tbbl <- 
  tibble(
    `variable 1` = 1:2, 
    two = 3:4
  )

tbbl
```

## Tibbles Prevent Errors

```{r}
df$tw 
```

```{r}
tbbl$tw 
```

## Example Pipeline

```{r}
#| cache: true
url <- "http://bit.ly/raw-train-data-csv"

all_stations <- 
  read_csv(url) |> 
  select(station = stationname, date, rides) |> 
  mutate(
    date = mdy(date),
    rides = rides / 1000
    ) |> 
  group_by(date, station) |> 
  summarise(
    rides = max(rides),
    .groups = "drop"
  )
  
```

```{r}

all_stations |> 
  head() |> 
  gt::gt()
```
