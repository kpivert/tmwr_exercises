---
title: "Chapter 6"
format:
  html:
    theme: cosmo
    toc: true
    number-sections: true
---

```{r}
require(tidymodels)
data(ames)
ames <- 
  ames |> 
  mutate(
    Sale_Price = log10(Sale_Price)
  )

set.seed(502) 
ames_split <- initial_split(ames, prop = 0.8, strata = Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)

theme_set(
  theme_minimal()
)
```

# Parsnip

```{r}
tidymodels_prefer()
```

```{r}
linear_reg() |> set_engine("lm")
```

```{r}
linear_reg() |> set_engine("glmnet")
```

```{r}
linear_reg() |> set_engine("stan")
```

Use either

1.  `fit()` to use formula function or

2.  `fit_xy()` when data are preprocessed. Passed "as is" to underlying function.

### `translate()` Will show underlying calls

```{r}
linear_reg() |> 
  set_engine("lm") |> 
  translate()
```

```{r}
linear_reg(
  penalty = 1
  ) |> 
  set_engine("glmnet") |> 
  translate()
```

```{r}
linear_reg() |> 
  set_engine("stan") |> 
  translate()
```

### First Model: Predict `Sale_Price` Based on lon/lat

1.  Set Engine

```{r}
lm_model <- 
  linear_reg() |> 
  set_engine("lm")
```

2.  Set Formula and Fit Model

```{r}
lm_form_fit <- 
  lm_model |> 
  fit(Sale_Price ~ Longitude + Latitude, data = ames_train)
```

3.  Set `x` and `y` and Fit Model

```{r}
lm_xy_fit <- 
  lm_model |> 
  fit_xy(
    x = ames_train |> select(Longitude, Latitude),
    y = ames_train |> pull(Sale_Price)
  )
```

```{r}
lm_form_fit
```

```{r}
lm_xy_fit
```

### `rand_forest()`

```{r}

rand_forest(trees = 1000, min_n = 5) |> 
  set_engine("ranger") |> 
  set_mode("regression") |> 
  translate()
```

#### Engine-Specific Arguments

```{r}
rand_forest(trees = 1000, min_n = 5) |> 
  set_engine("ranger", verbose = TRUE) |> 
  set_mode("regression")
```

### Use Model Results

```{r}
lm_form_fit |> 
  extract_fit_engine()
```

```{r}
lm_form_fit |> 
  extract_fit_engine() |> 
  vcov()
```

```{r}
model_res <- 
  lm_form_fit |> 
  extract_fit_engine() |> 
  summary()

param_est <- coef(model_res)

class(param_est)

param_est
```

### `broom` again to the rescue

```{r}
tidy(lm_form_fit)
```

### Making Predictions

```{r}
ames_test_small <- 
  ames_test |> 
  slice(1:5)

predict(
  lm_form_fit, 
  new_data = ames_test_small
  ) |> 
  mutate(
    pred_dollars = (exp(.pred) * 1000) |> 
       scales::dollar()
  )
```

```{r}
ames_test_small |> 
  select(Sale_Price) |> 
  bind_cols(predict(lm_form_fit, ames_test_small)) |> 
  bind_cols(predict(lm_form_fit, ames_test_small, type = "pred_int")) |> 
  mutate(
    across(
      everything(),
      ~ (exp(.x) * 1000) |> 
        scales::dollar()
    )
  )
```

### Tree Model

```{r}
tree_model <- 
  decision_tree(min_n = 2) |> 
  set_engine("rpart") |> 
  set_mode("regression")

tree_fit <- 
  tree_model |> 
  fit(Sale_Price ~ Longitude + Latitude, data = ames_train)

ames_test_small |> 
  select(Sale_Price) |> 
  bind_cols(predict(tree_fit, ames_test_small))
```

### Code for Modeling Ames Moving Forward

```{r}
#| eval: false
require(tidymodels)
data(ames)
ames <- 
  mutate(ames, Sale_Price = log10(Sale_Price))

set.seed(502)
ames_split <- initial_split(ames, prop = 0.80, strata = Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)

lm_model <- 
  linear_reg() |> 
  set_engine("lm")
```
