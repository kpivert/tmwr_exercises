---
title: "Chapter 3"
format: 
  html:
    code-fold: true
---

```{r}
#| echo: false
#| message: false
#| warning: false
require(tidyverse)
```

# Review of R Modeling Fundamentals

```{r}
#| echo: false
#| message: false
data(crickets, package = "modeldata")

names(crickets)
```

```{r}
#| echo: false
theme_set(
  theme_minimal()
)
```

### Make a Viz

```{r}

ggplot(
  crickets,
  aes(
    x = temp, 
    y = rate,
    color = species,
    pch = species, 
    lty = species
    )
  ) +
  geom_point(size = 2) +
  geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
  theme_light() +
  labs(
    x = "Temperature (C)",
    y = "Chirp Rate (per minute"
  ) +
  scale_color_brewer(
    palette = "Paired"
  ) +
  theme(legend.position = "top")
```

Interaction terms can be include like this

`rate ~ temp + species + temp:species`

or a shortcut can be used to expand all interactions containing interactions with 2 variables

`rate ~ (temp + species)^2`

Or another short to expand factors to include all possible interactions

`rate ~ temp * species`

Inline functions can be used in the formula

-   e.g., natural log of temp.

    -   `rate ~ log(temp)`

-   literal math can be applied to predictors using the identity function `I()`

    -   `rate ~ I( (temp * 9/5) + 32)` {converts from C to F}

-   many functions can be used inside formulas

    -   e.g., can use `poly(x, 3)` to create linear, quadratic, and cubic terms for `x` to model as main effects.

-   Used `.` to model main effects for all columns not on left-hand side of `~`

    -   e.g., `~ (.)^3` creates main effects and 2- and 3-variable interactions

### Fit a Model

Note that `_fit` indicates a fitted model

```{r}

interaction_fit <- 
  lm(rate ~ (temp + species)^2, data = crickets)
```

```{r}

interaction_fit |> 
  broom::tidy() |> 
  gt::gt()
```

### Visualize Fit

```{r}

par(mfrow = c(1, 2))

plot(interaction_fit, which = 1)

plot(interaction_fit, which = 2)

```

### Fit Model without Interaction Term and Compare Effects Using ANOVA

```{r}

main_effect_fit <- 
  lm(rate ~ temp + species, data = crickets)
```

```{r}

anova(main_effect_fit, interaction_fit)

```

```{r}
par(mfrow = c(1, 2))

plot(main_effect_fit, which = 1)

plot(main_effect_fit, which = 2)

```

```{r}
summary(main_effect_fit)
```

### Predictions

```{r}

new_values <- data.frame(
  species = "O. exclamationis",
  temp = 15:20
)

predict(
  main_effect_fit, 
  newdata = new_values
)
```

### Handling Missing Values

Ways to handle missing values:

-   `na.action()`

-   `na.fail()` will throw error

-   `na.omit()` will drop records with missing data

`lm` defaults to `na.pass()`

```{r}

new_values$temp[1] <- NA

predict(main_effect_fit, newdata = new_values)

```

Using `na.fail()`

```{r}
#| eval: false
predict(main_effect_fit, newdata = new_values, na.action = na.fail)
```

Using `na.omit()`

```{r}
predict(main_effect_fit, newdata = new_values, na.action = na.omit)
```

### `broom::tidy()`

```{r}
corr_res <- 
  map(
    mtcars |> select(-mpg),
    cor.test, 
    y = mtcars$mpg
  )
```

```{r}
corr_res[[1]]
```

```{r}
require(broom)

tidy(corr_res[[1]]) |> 
  gt::gt()
```

```{r}
corr_res |> 
  map_dfr(tidy, .id = "predictor") |> 
  ggplot(
    aes(
      x = fct_reorder(predictor, estimate)
    )
  ) +
  geom_point(
    aes(y = estimate)
  ) +
  geom_errorbar(
    aes(
      ymin = conf.low,
      ymax = conf.high
    ),
    width = 0.1
  ) +
  labs(
    x = NULL, 
    y = "Correlation with mpg"
  )
```

### Combining `base R` and `tidyverse`

```{r}
split_by_species <- 
  crickets |> 
  group_nest(species)

split_by_species
```

#### Use `purrr::map` to create separate models for each species

```{r}
model_by_species <- 
  split_by_species |> 
  mutate(
    model = map(data, ~lm(rate ~ temp, data = .x))
  )

model_by_species
```

#### Collect Coefficients

```{r}
model_by_species |> 
  mutate(
    coef = map(model, tidy) 
  ) |> 
  select(species, coef) |> 
  unnest(cols = c(coef))
```

### Ooooh set function namespace prefs with `conflicted`

```{r}
require(conflicted)
conflict_prefer("filter", winner = "dplyr")

```

#### `tidymodels` Preferences

```{r}
require(tidymodels)
tidymodels_prefer(quiet = FALSE)
```
